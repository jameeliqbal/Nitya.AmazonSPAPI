/* 
 * Amazon Shipping API
 *
 * The Amazon Shipping API is designed to support outbound shipping use cases both for orders originating on Amazon-owned marketplaces as well as external channels/marketplaces. With these APIs, you can request shipping rates, create shipments, cancel shipments, and track shipments.
 *
 * OpenAPI spec version: v2
 * Contact: swa-api-core@amazon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPI.Orders.Client.SwaggerDateConverter;

namespace Common.Models.Amzn.Shipping
{
    /// <summary>
    /// Detailed information for an ineligible shipping service offering.
    /// </summary>
    [DataContract]
    public partial class IneligibleRate :  IEquatable<IneligibleRate>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IneligibleRate" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected IneligibleRate() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="IneligibleRate" /> class.
        /// </summary>
        /// <param name="serviceId">serviceId (required).</param>
        /// <param name="serviceName">serviceName (required).</param>
        /// <param name="carrierName">carrierName (required).</param>
        /// <param name="carrierId">carrierId (required).</param>
        /// <param name="ineligibilityReasons">A list of reasons why a shipping service offering is ineligible. (required).</param>
        public IneligibleRate(ServiceId serviceId = default(ServiceId), ServiceName serviceName = default(ServiceName), CarrierName carrierName = default(CarrierName), CarrierId carrierId = default(CarrierId), List<IneligibilityReason> ineligibilityReasons = default(List<IneligibilityReason>))
        {
            // to ensure "serviceId" is required (not null)
            if (serviceId == null)
            {
                throw new InvalidDataException("serviceId is a required property for IneligibleRate and cannot be null");
            }
            else
            {
                this.ServiceId = serviceId;
            }
            // to ensure "serviceName" is required (not null)
            if (serviceName == null)
            {
                throw new InvalidDataException("serviceName is a required property for IneligibleRate and cannot be null");
            }
            else
            {
                this.ServiceName = serviceName;
            }
            // to ensure "carrierName" is required (not null)
            if (carrierName == null)
            {
                throw new InvalidDataException("carrierName is a required property for IneligibleRate and cannot be null");
            }
            else
            {
                this.CarrierName = carrierName;
            }
            // to ensure "carrierId" is required (not null)
            if (carrierId == null)
            {
                throw new InvalidDataException("carrierId is a required property for IneligibleRate and cannot be null");
            }
            else
            {
                this.CarrierId = carrierId;
            }
            // to ensure "ineligibilityReasons" is required (not null)
            if (ineligibilityReasons == null)
            {
                throw new InvalidDataException("ineligibilityReasons is a required property for IneligibleRate and cannot be null");
            }
            else
            {
                this.IneligibilityReasons = ineligibilityReasons;
            }
        }
        
        /// <summary>
        /// Gets or Sets ServiceId
        /// </summary>
        [DataMember(Name="serviceId", EmitDefaultValue=false)]
        public ServiceId ServiceId { get; set; }

        /// <summary>
        /// Gets or Sets ServiceName
        /// </summary>
        [DataMember(Name="serviceName", EmitDefaultValue=false)]
        public ServiceName ServiceName { get; set; }

        /// <summary>
        /// Gets or Sets CarrierName
        /// </summary>
        [DataMember(Name="carrierName", EmitDefaultValue=false)]
        public CarrierName CarrierName { get; set; }

        /// <summary>
        /// Gets or Sets CarrierId
        /// </summary>
        [DataMember(Name="carrierId", EmitDefaultValue=false)]
        public CarrierId CarrierId { get; set; }

        /// <summary>
        /// A list of reasons why a shipping service offering is ineligible.
        /// </summary>
        /// <value>A list of reasons why a shipping service offering is ineligible.</value>
        [DataMember(Name="ineligibilityReasons", EmitDefaultValue=false)]
        public List<IneligibilityReason> IneligibilityReasons { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class IneligibleRate {\n");
            sb.Append("  ServiceId: ").Append(ServiceId).Append("\n");
            sb.Append("  ServiceName: ").Append(ServiceName).Append("\n");
            sb.Append("  CarrierName: ").Append(CarrierName).Append("\n");
            sb.Append("  CarrierId: ").Append(CarrierId).Append("\n");
            sb.Append("  IneligibilityReasons: ").Append(IneligibilityReasons).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IneligibleRate);
        }

        /// <summary>
        /// Returns true if IneligibleRate instances are equal
        /// </summary>
        /// <param name="input">Instance of IneligibleRate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IneligibleRate input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ServiceId == input.ServiceId ||
                    (this.ServiceId != null &&
                    this.ServiceId.Equals(input.ServiceId))
                ) && 
                (
                    this.ServiceName == input.ServiceName ||
                    (this.ServiceName != null &&
                    this.ServiceName.Equals(input.ServiceName))
                ) && 
                (
                    this.CarrierName == input.CarrierName ||
                    (this.CarrierName != null &&
                    this.CarrierName.Equals(input.CarrierName))
                ) && 
                (
                    this.CarrierId == input.CarrierId ||
                    (this.CarrierId != null &&
                    this.CarrierId.Equals(input.CarrierId))
                ) && 
                (
                    this.IneligibilityReasons == input.IneligibilityReasons ||
                    this.IneligibilityReasons != null &&
                    this.IneligibilityReasons.SequenceEqual(input.IneligibilityReasons)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ServiceId != null)
                    hashCode = hashCode * 59 + this.ServiceId.GetHashCode();
                if (this.ServiceName != null)
                    hashCode = hashCode * 59 + this.ServiceName.GetHashCode();
                if (this.CarrierName != null)
                    hashCode = hashCode * 59 + this.CarrierName.GetHashCode();
                if (this.CarrierId != null)
                    hashCode = hashCode * 59 + this.CarrierId.GetHashCode();
                if (this.IneligibilityReasons != null)
                    hashCode = hashCode * 59 + this.IneligibilityReasons.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
