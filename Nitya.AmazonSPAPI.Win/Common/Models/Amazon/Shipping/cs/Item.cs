/* 
 * Amazon Shipping API
 *
 * The Amazon Shipping API is designed to support outbound shipping use cases both for orders originating on Amazon-owned marketplaces as well as external channels/marketplaces. With these APIs, you can request shipping rates, create shipments, cancel shipments, and track shipments.
 *
 * OpenAPI spec version: v2
 * Contact: swa-api-core@amazon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPI.Orders.Client.SwaggerDateConverter;

namespace Common.Models.Amzn.Shipping
{
    /// <summary>
    /// An item in a package.
    /// </summary>
    [DataContract]
    public partial class Item :  IEquatable<Item>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Item" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Item() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Item" /> class.
        /// </summary>
        /// <param name="itemValue">itemValue.</param>
        /// <param name="description">The product description of the item..</param>
        /// <param name="itemIdentifier">A unique identifier for an item provided by the client..</param>
        /// <param name="quantity">The number of units. This value is required. (required).</param>
        /// <param name="weight">weight.</param>
        /// <param name="isHazmat">When true, the item qualifies as hazardous materials (hazmat). Defaults to false..</param>
        /// <param name="productType">The product type of the item..</param>
        /// <param name="invoiceDetails">invoiceDetails.</param>
        /// <param name="serialNumbers">A list of unique serial numbers in an Amazon package that can be used to guarantee non-fraudulent items. The number of serial numbers in the list must be less than or equal to the quantity of items being shipped. Only applicable when channel source is Amazon..</param>
        /// <param name="directFulfillmentItemIdentifiers">directFulfillmentItemIdentifiers.</param>
        public Item(Currency itemValue = default(Currency), string description = default(string), string itemIdentifier = default(string), int? quantity = default(int?), Weight weight = default(Weight), bool? isHazmat = default(bool?), string productType = default(string), InvoiceDetails invoiceDetails = default(InvoiceDetails), List<string> serialNumbers = default(List<string>), DirectFulfillmentItemIdentifiers directFulfillmentItemIdentifiers = default(DirectFulfillmentItemIdentifiers))
        {
            // to ensure "quantity" is required (not null)
            if (quantity == null)
            {
                throw new InvalidDataException("quantity is a required property for Item and cannot be null");
            }
            else
            {
                this.Quantity = quantity;
            }
            this.ItemValue = itemValue;
            this.Description = description;
            this.ItemIdentifier = itemIdentifier;
            this.Weight = weight;
            this.IsHazmat = isHazmat;
            this.ProductType = productType;
            this.InvoiceDetails = invoiceDetails;
            this.SerialNumbers = serialNumbers;
            this.DirectFulfillmentItemIdentifiers = directFulfillmentItemIdentifiers;
        }
        
        /// <summary>
        /// Gets or Sets ItemValue
        /// </summary>
        [DataMember(Name="itemValue", EmitDefaultValue=false)]
        public Currency ItemValue { get; set; }

        /// <summary>
        /// The product description of the item.
        /// </summary>
        /// <value>The product description of the item.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// A unique identifier for an item provided by the client.
        /// </summary>
        /// <value>A unique identifier for an item provided by the client.</value>
        [DataMember(Name="itemIdentifier", EmitDefaultValue=false)]
        public string ItemIdentifier { get; set; }

        /// <summary>
        /// The number of units. This value is required.
        /// </summary>
        /// <value>The number of units. This value is required.</value>
        [DataMember(Name="quantity", EmitDefaultValue=false)]
        public int? Quantity { get; set; }

        /// <summary>
        /// Gets or Sets Weight
        /// </summary>
        [DataMember(Name="weight", EmitDefaultValue=false)]
        public Weight Weight { get; set; }

        /// <summary>
        /// When true, the item qualifies as hazardous materials (hazmat). Defaults to false.
        /// </summary>
        /// <value>When true, the item qualifies as hazardous materials (hazmat). Defaults to false.</value>
        [DataMember(Name="isHazmat", EmitDefaultValue=false)]
        public bool? IsHazmat { get; set; }

        /// <summary>
        /// The product type of the item.
        /// </summary>
        /// <value>The product type of the item.</value>
        [DataMember(Name="productType", EmitDefaultValue=false)]
        public string ProductType { get; set; }

        /// <summary>
        /// Gets or Sets InvoiceDetails
        /// </summary>
        [DataMember(Name="invoiceDetails", EmitDefaultValue=false)]
        public InvoiceDetails InvoiceDetails { get; set; }

        /// <summary>
        /// A list of unique serial numbers in an Amazon package that can be used to guarantee non-fraudulent items. The number of serial numbers in the list must be less than or equal to the quantity of items being shipped. Only applicable when channel source is Amazon.
        /// </summary>
        /// <value>A list of unique serial numbers in an Amazon package that can be used to guarantee non-fraudulent items. The number of serial numbers in the list must be less than or equal to the quantity of items being shipped. Only applicable when channel source is Amazon.</value>
        [DataMember(Name="serialNumbers", EmitDefaultValue=false)]
        public List<string> SerialNumbers { get; set; }

        /// <summary>
        /// Gets or Sets DirectFulfillmentItemIdentifiers
        /// </summary>
        [DataMember(Name="directFulfillmentItemIdentifiers", EmitDefaultValue=false)]
        public DirectFulfillmentItemIdentifiers DirectFulfillmentItemIdentifiers { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Item {\n");
            sb.Append("  ItemValue: ").Append(ItemValue).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ItemIdentifier: ").Append(ItemIdentifier).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  Weight: ").Append(Weight).Append("\n");
            sb.Append("  IsHazmat: ").Append(IsHazmat).Append("\n");
            sb.Append("  ProductType: ").Append(ProductType).Append("\n");
            sb.Append("  InvoiceDetails: ").Append(InvoiceDetails).Append("\n");
            sb.Append("  SerialNumbers: ").Append(SerialNumbers).Append("\n");
            sb.Append("  DirectFulfillmentItemIdentifiers: ").Append(DirectFulfillmentItemIdentifiers).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Item);
        }

        /// <summary>
        /// Returns true if Item instances are equal
        /// </summary>
        /// <param name="input">Instance of Item to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Item input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ItemValue == input.ItemValue ||
                    (this.ItemValue != null &&
                    this.ItemValue.Equals(input.ItemValue))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.ItemIdentifier == input.ItemIdentifier ||
                    (this.ItemIdentifier != null &&
                    this.ItemIdentifier.Equals(input.ItemIdentifier))
                ) && 
                (
                    this.Quantity == input.Quantity ||
                    (this.Quantity != null &&
                    this.Quantity.Equals(input.Quantity))
                ) && 
                (
                    this.Weight == input.Weight ||
                    (this.Weight != null &&
                    this.Weight.Equals(input.Weight))
                ) && 
                (
                    this.IsHazmat == input.IsHazmat ||
                    (this.IsHazmat != null &&
                    this.IsHazmat.Equals(input.IsHazmat))
                ) && 
                (
                    this.ProductType == input.ProductType ||
                    (this.ProductType != null &&
                    this.ProductType.Equals(input.ProductType))
                ) && 
                (
                    this.InvoiceDetails == input.InvoiceDetails ||
                    (this.InvoiceDetails != null &&
                    this.InvoiceDetails.Equals(input.InvoiceDetails))
                ) && 
                (
                    this.SerialNumbers == input.SerialNumbers ||
                    this.SerialNumbers != null &&
                    this.SerialNumbers.SequenceEqual(input.SerialNumbers)
                ) && 
                (
                    this.DirectFulfillmentItemIdentifiers == input.DirectFulfillmentItemIdentifiers ||
                    (this.DirectFulfillmentItemIdentifiers != null &&
                    this.DirectFulfillmentItemIdentifiers.Equals(input.DirectFulfillmentItemIdentifiers))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ItemValue != null)
                    hashCode = hashCode * 59 + this.ItemValue.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.ItemIdentifier != null)
                    hashCode = hashCode * 59 + this.ItemIdentifier.GetHashCode();
                if (this.Quantity != null)
                    hashCode = hashCode * 59 + this.Quantity.GetHashCode();
                if (this.Weight != null)
                    hashCode = hashCode * 59 + this.Weight.GetHashCode();
                if (this.IsHazmat != null)
                    hashCode = hashCode * 59 + this.IsHazmat.GetHashCode();
                if (this.ProductType != null)
                    hashCode = hashCode * 59 + this.ProductType.GetHashCode();
                if (this.InvoiceDetails != null)
                    hashCode = hashCode * 59 + this.InvoiceDetails.GetHashCode();
                if (this.SerialNumbers != null)
                    hashCode = hashCode * 59 + this.SerialNumbers.GetHashCode();
                if (this.DirectFulfillmentItemIdentifiers != null)
                    hashCode = hashCode * 59 + this.DirectFulfillmentItemIdentifiers.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
