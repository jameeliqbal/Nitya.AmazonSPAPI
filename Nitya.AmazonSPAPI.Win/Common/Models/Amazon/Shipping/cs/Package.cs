/* 
 * Amazon Shipping API
 *
 * The Amazon Shipping API is designed to support outbound shipping use cases both for orders originating on Amazon-owned marketplaces as well as external channels/marketplaces. With these APIs, you can request shipping rates, create shipments, cancel shipments, and track shipments.
 *
 * OpenAPI spec version: v2
 * Contact: swa-api-core@amazon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPI.Orders.Client.SwaggerDateConverter;

namespace Common.Models.Amzn.Shipping
{
    /// <summary>
    /// A package to be shipped through a shipping service offering.
    /// </summary>
    [DataContract]
    public partial class Package :  IEquatable<Package>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Package" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Package() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Package" /> class.
        /// </summary>
        /// <param name="dimensions">dimensions (required).</param>
        /// <param name="weight">weight (required).</param>
        /// <param name="insuredValue">insuredValue (required).</param>
        /// <param name="isHazmat">When true, the package contains hazardous materials. Defaults to false..</param>
        /// <param name="sellerDisplayName">The seller name displayed on the label..</param>
        /// <param name="charges">charges.</param>
        /// <param name="packageClientReferenceId">packageClientReferenceId (required).</param>
        /// <param name="items">items (required).</param>
        public Package(Dimensions dimensions = default(Dimensions), Weight weight = default(Weight), Currency insuredValue = default(Currency), bool? isHazmat = default(bool?), string sellerDisplayName = default(string), ChargeList charges = default(ChargeList), PackageClientReferenceId packageClientReferenceId = default(PackageClientReferenceId), ItemList items = default(ItemList))
        {
            // to ensure "dimensions" is required (not null)
            if (dimensions == null)
            {
                throw new InvalidDataException("dimensions is a required property for Package and cannot be null");
            }
            else
            {
                this.Dimensions = dimensions;
            }
            // to ensure "weight" is required (not null)
            if (weight == null)
            {
                throw new InvalidDataException("weight is a required property for Package and cannot be null");
            }
            else
            {
                this.Weight = weight;
            }
            // to ensure "insuredValue" is required (not null)
            if (insuredValue == null)
            {
                throw new InvalidDataException("insuredValue is a required property for Package and cannot be null");
            }
            else
            {
                this.InsuredValue = insuredValue;
            }
            // to ensure "packageClientReferenceId" is required (not null)
            if (packageClientReferenceId == null)
            {
                throw new InvalidDataException("packageClientReferenceId is a required property for Package and cannot be null");
            }
            else
            {
                this.PackageClientReferenceId = packageClientReferenceId;
            }
            // to ensure "items" is required (not null)
            if (items == null)
            {
                throw new InvalidDataException("items is a required property for Package and cannot be null");
            }
            else
            {
                this.Items = items;
            }
            this.IsHazmat = isHazmat;
            this.SellerDisplayName = sellerDisplayName;
            this.Charges = charges;
        }
        
        /// <summary>
        /// Gets or Sets Dimensions
        /// </summary>
        [DataMember(Name="dimensions", EmitDefaultValue=false)]
        public Dimensions Dimensions { get; set; }

        /// <summary>
        /// Gets or Sets Weight
        /// </summary>
        [DataMember(Name="weight", EmitDefaultValue=false)]
        public Weight Weight { get; set; }

        /// <summary>
        /// Gets or Sets InsuredValue
        /// </summary>
        [DataMember(Name="insuredValue", EmitDefaultValue=false)]
        public Currency InsuredValue { get; set; }

        /// <summary>
        /// When true, the package contains hazardous materials. Defaults to false.
        /// </summary>
        /// <value>When true, the package contains hazardous materials. Defaults to false.</value>
        [DataMember(Name="isHazmat", EmitDefaultValue=false)]
        public bool? IsHazmat { get; set; }

        /// <summary>
        /// The seller name displayed on the label.
        /// </summary>
        /// <value>The seller name displayed on the label.</value>
        [DataMember(Name="sellerDisplayName", EmitDefaultValue=false)]
        public string SellerDisplayName { get; set; }

        /// <summary>
        /// Gets or Sets Charges
        /// </summary>
        [DataMember(Name="charges", EmitDefaultValue=false)]
        public ChargeList Charges { get; set; }

        /// <summary>
        /// Gets or Sets PackageClientReferenceId
        /// </summary>
        [DataMember(Name="packageClientReferenceId", EmitDefaultValue=false)]
        public PackageClientReferenceId PackageClientReferenceId { get; set; }

        /// <summary>
        /// Gets or Sets Items
        /// </summary>
        [DataMember(Name="items", EmitDefaultValue=false)]
        public ItemList Items { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Package {\n");
            sb.Append("  Dimensions: ").Append(Dimensions).Append("\n");
            sb.Append("  Weight: ").Append(Weight).Append("\n");
            sb.Append("  InsuredValue: ").Append(InsuredValue).Append("\n");
            sb.Append("  IsHazmat: ").Append(IsHazmat).Append("\n");
            sb.Append("  SellerDisplayName: ").Append(SellerDisplayName).Append("\n");
            sb.Append("  Charges: ").Append(Charges).Append("\n");
            sb.Append("  PackageClientReferenceId: ").Append(PackageClientReferenceId).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Package);
        }

        /// <summary>
        /// Returns true if Package instances are equal
        /// </summary>
        /// <param name="input">Instance of Package to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Package input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Dimensions == input.Dimensions ||
                    (this.Dimensions != null &&
                    this.Dimensions.Equals(input.Dimensions))
                ) && 
                (
                    this.Weight == input.Weight ||
                    (this.Weight != null &&
                    this.Weight.Equals(input.Weight))
                ) && 
                (
                    this.InsuredValue == input.InsuredValue ||
                    (this.InsuredValue != null &&
                    this.InsuredValue.Equals(input.InsuredValue))
                ) && 
                (
                    this.IsHazmat == input.IsHazmat ||
                    (this.IsHazmat != null &&
                    this.IsHazmat.Equals(input.IsHazmat))
                ) && 
                (
                    this.SellerDisplayName == input.SellerDisplayName ||
                    (this.SellerDisplayName != null &&
                    this.SellerDisplayName.Equals(input.SellerDisplayName))
                ) && 
                (
                    this.Charges == input.Charges ||
                    (this.Charges != null &&
                    this.Charges.Equals(input.Charges))
                ) && 
                (
                    this.PackageClientReferenceId == input.PackageClientReferenceId ||
                    (this.PackageClientReferenceId != null &&
                    this.PackageClientReferenceId.Equals(input.PackageClientReferenceId))
                ) && 
                (
                    this.Items == input.Items ||
                    (this.Items != null &&
                    this.Items.Equals(input.Items))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Dimensions != null)
                    hashCode = hashCode * 59 + this.Dimensions.GetHashCode();
                if (this.Weight != null)
                    hashCode = hashCode * 59 + this.Weight.GetHashCode();
                if (this.InsuredValue != null)
                    hashCode = hashCode * 59 + this.InsuredValue.GetHashCode();
                if (this.IsHazmat != null)
                    hashCode = hashCode * 59 + this.IsHazmat.GetHashCode();
                if (this.SellerDisplayName != null)
                    hashCode = hashCode * 59 + this.SellerDisplayName.GetHashCode();
                if (this.Charges != null)
                    hashCode = hashCode * 59 + this.Charges.GetHashCode();
                if (this.PackageClientReferenceId != null)
                    hashCode = hashCode * 59 + this.PackageClientReferenceId.GetHashCode();
                if (this.Items != null)
                    hashCode = hashCode * 59 + this.Items.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
