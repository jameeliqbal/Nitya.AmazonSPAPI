/* 
 * Amazon Shipping API
 *
 * The Amazon Shipping API is designed to support outbound shipping use cases both for orders originating on Amazon-owned marketplaces as well as external channels/marketplaces. With these APIs, you can request shipping rates, create shipments, cancel shipments, and track shipments.
 *
 * OpenAPI spec version: v2
 * Contact: swa-api-core@amazon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPI.Orders.Client.SwaggerDateConverter;

namespace Common.Models.Amzn.Shipping
{
    /// <summary>
    /// The document specifications requested. For calls to the purchaseShipment operation, the shipment purchase fails if the specified document specifications are not among those returned in the response to the getRates operation.
    /// </summary>
    [DataContract]
    public partial class RequestedDocumentSpecification :  IEquatable<RequestedDocumentSpecification>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets Format
        /// </summary>
        [DataMember(Name="format", EmitDefaultValue=false)]
        public DocumentFormat Format { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="RequestedDocumentSpecification" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RequestedDocumentSpecification() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RequestedDocumentSpecification" /> class.
        /// </summary>
        /// <param name="format">format (required).</param>
        /// <param name="size">size (required).</param>
        /// <param name="dpi">dpi.</param>
        /// <param name="pageLayout">pageLayout.</param>
        /// <param name="needFileJoining">needFileJoining (required).</param>
        /// <param name="requestedDocumentTypes">A list of the document types requested. (required).</param>
        public RequestedDocumentSpecification(DocumentFormat format = default(DocumentFormat), DocumentSize size = default(DocumentSize), Dpi dpi = default(Dpi), PageLayout pageLayout = default(PageLayout), NeedFileJoining needFileJoining = default(NeedFileJoining), List<DocumentType> requestedDocumentTypes = default(List<DocumentType>))
        {
            // to ensure "format" is required (not null)
            if (format == null)
            {
                throw new InvalidDataException("format is a required property for RequestedDocumentSpecification and cannot be null");
            }
            else
            {
                this.Format = format;
            }
            // to ensure "size" is required (not null)
            if (size == null)
            {
                throw new InvalidDataException("size is a required property for RequestedDocumentSpecification and cannot be null");
            }
            else
            {
                this.Size = size;
            }
            // to ensure "needFileJoining" is required (not null)
            if (needFileJoining == null)
            {
                throw new InvalidDataException("needFileJoining is a required property for RequestedDocumentSpecification and cannot be null");
            }
            else
            {
                this.NeedFileJoining = needFileJoining;
            }
            // to ensure "requestedDocumentTypes" is required (not null)
            if (requestedDocumentTypes == null)
            {
                throw new InvalidDataException("requestedDocumentTypes is a required property for RequestedDocumentSpecification and cannot be null");
            }
            else
            {
                this.RequestedDocumentTypes = requestedDocumentTypes;
            }
            this.Dpi = dpi;
            this.PageLayout = pageLayout;
        }
        

        /// <summary>
        /// Gets or Sets Size
        /// </summary>
        [DataMember(Name="size", EmitDefaultValue=false)]
        public DocumentSize Size { get; set; }

        /// <summary>
        /// Gets or Sets Dpi
        /// </summary>
        [DataMember(Name="dpi", EmitDefaultValue=false)]
        public Dpi Dpi { get; set; }

        /// <summary>
        /// Gets or Sets PageLayout
        /// </summary>
        [DataMember(Name="pageLayout", EmitDefaultValue=false)]
        public PageLayout PageLayout { get; set; }

        /// <summary>
        /// Gets or Sets NeedFileJoining
        /// </summary>
        [DataMember(Name="needFileJoining", EmitDefaultValue=false)]
        public NeedFileJoining NeedFileJoining { get; set; }

        /// <summary>
        /// A list of the document types requested.
        /// </summary>
        /// <value>A list of the document types requested.</value>
        [DataMember(Name="requestedDocumentTypes", EmitDefaultValue=false)]
        public List<DocumentType> RequestedDocumentTypes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RequestedDocumentSpecification {\n");
            sb.Append("  Format: ").Append(Format).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  Dpi: ").Append(Dpi).Append("\n");
            sb.Append("  PageLayout: ").Append(PageLayout).Append("\n");
            sb.Append("  NeedFileJoining: ").Append(NeedFileJoining).Append("\n");
            sb.Append("  RequestedDocumentTypes: ").Append(RequestedDocumentTypes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RequestedDocumentSpecification);
        }

        /// <summary>
        /// Returns true if RequestedDocumentSpecification instances are equal
        /// </summary>
        /// <param name="input">Instance of RequestedDocumentSpecification to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RequestedDocumentSpecification input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Format == input.Format ||
                    (this.Format != null &&
                    this.Format.Equals(input.Format))
                ) && 
                (
                    this.Size == input.Size ||
                    (this.Size != null &&
                    this.Size.Equals(input.Size))
                ) && 
                (
                    this.Dpi == input.Dpi ||
                    (this.Dpi != null &&
                    this.Dpi.Equals(input.Dpi))
                ) && 
                (
                    this.PageLayout == input.PageLayout ||
                    (this.PageLayout != null &&
                    this.PageLayout.Equals(input.PageLayout))
                ) && 
                (
                    this.NeedFileJoining == input.NeedFileJoining ||
                    (this.NeedFileJoining != null &&
                    this.NeedFileJoining.Equals(input.NeedFileJoining))
                ) && 
                (
                    this.RequestedDocumentTypes == input.RequestedDocumentTypes ||
                    this.RequestedDocumentTypes != null &&
                    this.RequestedDocumentTypes.SequenceEqual(input.RequestedDocumentTypes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Format != null)
                    hashCode = hashCode * 59 + this.Format.GetHashCode();
                if (this.Size != null)
                    hashCode = hashCode * 59 + this.Size.GetHashCode();
                if (this.Dpi != null)
                    hashCode = hashCode * 59 + this.Dpi.GetHashCode();
                if (this.PageLayout != null)
                    hashCode = hashCode * 59 + this.PageLayout.GetHashCode();
                if (this.NeedFileJoining != null)
                    hashCode = hashCode * 59 + this.NeedFileJoining.GetHashCode();
                if (this.RequestedDocumentTypes != null)
                    hashCode = hashCode * 59 + this.RequestedDocumentTypes.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
