/* 
 * Amazon Shipping API
 *
 * The Amazon Shipping API is designed to support outbound shipping use cases both for orders originating on Amazon-owned marketplaces as well as external channels/marketplaces. With these APIs, you can request shipping rates, create shipments, cancel shipments, and track shipments.
 *
 * OpenAPI spec version: v2
 * Contact: swa-api-core@amazon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPI.Orders.Client.SwaggerDateConverter;

namespace Common.Models.Amzn.Shipping
{
    /// <summary>
    /// Document specification that is supported for a service offering.
    /// </summary>
    [DataContract]
    public partial class SupportedDocumentSpecification :  IEquatable<SupportedDocumentSpecification>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets Format
        /// </summary>
        [DataMember(Name="format", EmitDefaultValue=false)]
        public DocumentFormat Format { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SupportedDocumentSpecification" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SupportedDocumentSpecification() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SupportedDocumentSpecification" /> class.
        /// </summary>
        /// <param name="format">format (required).</param>
        /// <param name="size">size (required).</param>
        /// <param name="printOptions">printOptions (required).</param>
        public SupportedDocumentSpecification(DocumentFormat format = default(DocumentFormat), DocumentSize size = default(DocumentSize), PrintOptionList printOptions = default(PrintOptionList))
        {
            // to ensure "format" is required (not null)
            if (format == null)
            {
                throw new InvalidDataException("format is a required property for SupportedDocumentSpecification and cannot be null");
            }
            else
            {
                this.Format = format;
            }
            // to ensure "size" is required (not null)
            if (size == null)
            {
                throw new InvalidDataException("size is a required property for SupportedDocumentSpecification and cannot be null");
            }
            else
            {
                this.Size = size;
            }
            // to ensure "printOptions" is required (not null)
            if (printOptions == null)
            {
                throw new InvalidDataException("printOptions is a required property for SupportedDocumentSpecification and cannot be null");
            }
            else
            {
                this.PrintOptions = printOptions;
            }
        }
        

        /// <summary>
        /// Gets or Sets Size
        /// </summary>
        [DataMember(Name="size", EmitDefaultValue=false)]
        public DocumentSize Size { get; set; }

        /// <summary>
        /// Gets or Sets PrintOptions
        /// </summary>
        [DataMember(Name="printOptions", EmitDefaultValue=false)]
        public PrintOptionList PrintOptions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SupportedDocumentSpecification {\n");
            sb.Append("  Format: ").Append(Format).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  PrintOptions: ").Append(PrintOptions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SupportedDocumentSpecification);
        }

        /// <summary>
        /// Returns true if SupportedDocumentSpecification instances are equal
        /// </summary>
        /// <param name="input">Instance of SupportedDocumentSpecification to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SupportedDocumentSpecification input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Format == input.Format ||
                    (this.Format != null &&
                    this.Format.Equals(input.Format))
                ) && 
                (
                    this.Size == input.Size ||
                    (this.Size != null &&
                    this.Size.Equals(input.Size))
                ) && 
                (
                    this.PrintOptions == input.PrintOptions ||
                    (this.PrintOptions != null &&
                    this.PrintOptions.Equals(input.PrintOptions))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Format != null)
                    hashCode = hashCode * 59 + this.Format.GetHashCode();
                if (this.Size != null)
                    hashCode = hashCode * 59 + this.Size.GetHashCode();
                if (this.PrintOptions != null)
                    hashCode = hashCode * 59 + this.PrintOptions.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
