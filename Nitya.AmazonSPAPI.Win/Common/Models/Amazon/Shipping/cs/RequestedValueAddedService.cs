/* 
 * Amazon Shipping API
 *
 * The Amazon Shipping API is designed to support outbound shipping use cases both for orders originating on Amazon-owned marketplaces as well as external channels/marketplaces. With these APIs, you can request shipping rates, create shipments, cancel shipments, and track shipments.
 *
 * OpenAPI spec version: v2
 * Contact: swa-api-core@amazon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPI.Orders.Client.SwaggerDateConverter;

namespace Common.Models.Amzn.Shipping
{
    /// <summary>
    /// A value-added service to be applied to a shipping service purchase.
    /// </summary>
    [DataContract]
    public partial class RequestedValueAddedService :  IEquatable<RequestedValueAddedService>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RequestedValueAddedService" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RequestedValueAddedService() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RequestedValueAddedService" /> class.
        /// </summary>
        /// <param name="id">The identifier of the selected value-added service. Must be among those returned in the response to the getRates operation. (required).</param>
        public RequestedValueAddedService(string id = default(string))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for RequestedValueAddedService and cannot be null");
            }
            else
            {
                this.Id = id;
            }
        }
        
        /// <summary>
        /// The identifier of the selected value-added service. Must be among those returned in the response to the getRates operation.
        /// </summary>
        /// <value>The identifier of the selected value-added service. Must be among those returned in the response to the getRates operation.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RequestedValueAddedService {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RequestedValueAddedService);
        }

        /// <summary>
        /// Returns true if RequestedValueAddedService instances are equal
        /// </summary>
        /// <param name="input">Instance of RequestedValueAddedService to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RequestedValueAddedService input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
