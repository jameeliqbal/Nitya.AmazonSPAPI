/* 
 * Amazon Shipping API
 *
 * The Amazon Shipping API is designed to support outbound shipping use cases both for orders originating on Amazon-owned marketplaces as well as external channels/marketplaces. With these APIs, you can request shipping rates, create shipments, cancel shipments, and track shipments.
 *
 * OpenAPI spec version: v2
 * Contact: swa-api-core@amazon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPI.Orders.Client.SwaggerDateConverter;

namespace Common.Models.Amzn.Shipping
{
    /// <summary>
    /// The payload for the directPurchaseShipment operation.
    /// </summary>
    [DataContract]
    public partial class DirectPurchaseResult :  IEquatable<DirectPurchaseResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DirectPurchaseResult" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DirectPurchaseResult() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DirectPurchaseResult" /> class.
        /// </summary>
        /// <param name="shipmentId">shipmentId (required).</param>
        /// <param name="packageDocumentDetailList">packageDocumentDetailList.</param>
        public DirectPurchaseResult(ShipmentId shipmentId = default(ShipmentId), PackageDocumentDetailList packageDocumentDetailList = default(PackageDocumentDetailList))
        {
            // to ensure "shipmentId" is required (not null)
            if (shipmentId == null)
            {
                throw new InvalidDataException("shipmentId is a required property for DirectPurchaseResult and cannot be null");
            }
            else
            {
                this.ShipmentId = shipmentId;
            }
            this.PackageDocumentDetailList = packageDocumentDetailList;
        }
        
        /// <summary>
        /// Gets or Sets ShipmentId
        /// </summary>
        [DataMember(Name="shipmentId", EmitDefaultValue=false)]
        public ShipmentId ShipmentId { get; set; }

        /// <summary>
        /// Gets or Sets PackageDocumentDetailList
        /// </summary>
        [DataMember(Name="packageDocumentDetailList", EmitDefaultValue=false)]
        public PackageDocumentDetailList PackageDocumentDetailList { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DirectPurchaseResult {\n");
            sb.Append("  ShipmentId: ").Append(ShipmentId).Append("\n");
            sb.Append("  PackageDocumentDetailList: ").Append(PackageDocumentDetailList).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DirectPurchaseResult);
        }

        /// <summary>
        /// Returns true if DirectPurchaseResult instances are equal
        /// </summary>
        /// <param name="input">Instance of DirectPurchaseResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DirectPurchaseResult input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ShipmentId == input.ShipmentId ||
                    (this.ShipmentId != null &&
                    this.ShipmentId.Equals(input.ShipmentId))
                ) && 
                (
                    this.PackageDocumentDetailList == input.PackageDocumentDetailList ||
                    (this.PackageDocumentDetailList != null &&
                    this.PackageDocumentDetailList.Equals(input.PackageDocumentDetailList))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ShipmentId != null)
                    hashCode = hashCode * 59 + this.ShipmentId.GetHashCode();
                if (this.PackageDocumentDetailList != null)
                    hashCode = hashCode * 59 + this.PackageDocumentDetailList.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
