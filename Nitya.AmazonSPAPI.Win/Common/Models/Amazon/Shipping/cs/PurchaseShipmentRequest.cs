/* 
 * Amazon Shipping API
 *
 * The Amazon Shipping API is designed to support outbound shipping use cases both for orders originating on Amazon-owned marketplaces as well as external channels/marketplaces. With these APIs, you can request shipping rates, create shipments, cancel shipments, and track shipments.
 *
 * OpenAPI spec version: v2
 * Contact: swa-api-core@amazon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPI.Orders.Client.SwaggerDateConverter;

namespace Common.Models.Amzn.Shipping
{
    /// <summary>
    /// The request schema for the purchaseShipment operation.
    /// </summary>
    [DataContract]
    public partial class PurchaseShipmentRequest :  IEquatable<PurchaseShipmentRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PurchaseShipmentRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PurchaseShipmentRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PurchaseShipmentRequest" /> class.
        /// </summary>
        /// <param name="requestToken">requestToken (required).</param>
        /// <param name="rateId">rateId (required).</param>
        /// <param name="requestedDocumentSpecification">requestedDocumentSpecification (required).</param>
        /// <param name="requestedValueAddedServices">requestedValueAddedServices.</param>
        /// <param name="additionalInputs">The additional inputs required to purchase a shipping offering, in JSON format. The JSON provided here must adhere to the JSON schema that is returned in the response to the getAdditionalInputs operation.  Additional inputs are only required when indicated by the requiresAdditionalInputs property in the response to the getRates operation..</param>
        public PurchaseShipmentRequest(RequestToken requestToken = default(RequestToken), RateId rateId = default(RateId), RequestedDocumentSpecification requestedDocumentSpecification = default(RequestedDocumentSpecification), RequestedValueAddedServiceList requestedValueAddedServices = default(RequestedValueAddedServiceList), Dictionary<string, Object> additionalInputs = default(Dictionary<string, Object>))
        {
            // to ensure "requestToken" is required (not null)
            if (requestToken == null)
            {
                throw new InvalidDataException("requestToken is a required property for PurchaseShipmentRequest and cannot be null");
            }
            else
            {
                this.RequestToken = requestToken;
            }
            // to ensure "rateId" is required (not null)
            if (rateId == null)
            {
                throw new InvalidDataException("rateId is a required property for PurchaseShipmentRequest and cannot be null");
            }
            else
            {
                this.RateId = rateId;
            }
            // to ensure "requestedDocumentSpecification" is required (not null)
            if (requestedDocumentSpecification == null)
            {
                throw new InvalidDataException("requestedDocumentSpecification is a required property for PurchaseShipmentRequest and cannot be null");
            }
            else
            {
                this.RequestedDocumentSpecification = requestedDocumentSpecification;
            }
            this.RequestedValueAddedServices = requestedValueAddedServices;
            this.AdditionalInputs = additionalInputs;
        }
        
        /// <summary>
        /// Gets or Sets RequestToken
        /// </summary>
        [DataMember(Name="requestToken", EmitDefaultValue=false)]
        public RequestToken RequestToken { get; set; }

        /// <summary>
        /// Gets or Sets RateId
        /// </summary>
        [DataMember(Name="rateId", EmitDefaultValue=false)]
        public RateId RateId { get; set; }

        /// <summary>
        /// Gets or Sets RequestedDocumentSpecification
        /// </summary>
        [DataMember(Name="requestedDocumentSpecification", EmitDefaultValue=false)]
        public RequestedDocumentSpecification RequestedDocumentSpecification { get; set; }

        /// <summary>
        /// Gets or Sets RequestedValueAddedServices
        /// </summary>
        [DataMember(Name="requestedValueAddedServices", EmitDefaultValue=false)]
        public RequestedValueAddedServiceList RequestedValueAddedServices { get; set; }

        /// <summary>
        /// The additional inputs required to purchase a shipping offering, in JSON format. The JSON provided here must adhere to the JSON schema that is returned in the response to the getAdditionalInputs operation.  Additional inputs are only required when indicated by the requiresAdditionalInputs property in the response to the getRates operation.
        /// </summary>
        /// <value>The additional inputs required to purchase a shipping offering, in JSON format. The JSON provided here must adhere to the JSON schema that is returned in the response to the getAdditionalInputs operation.  Additional inputs are only required when indicated by the requiresAdditionalInputs property in the response to the getRates operation.</value>
        [DataMember(Name="additionalInputs", EmitDefaultValue=false)]
        public Dictionary<string, Object> AdditionalInputs { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PurchaseShipmentRequest {\n");
            sb.Append("  RequestToken: ").Append(RequestToken).Append("\n");
            sb.Append("  RateId: ").Append(RateId).Append("\n");
            sb.Append("  RequestedDocumentSpecification: ").Append(RequestedDocumentSpecification).Append("\n");
            sb.Append("  RequestedValueAddedServices: ").Append(RequestedValueAddedServices).Append("\n");
            sb.Append("  AdditionalInputs: ").Append(AdditionalInputs).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PurchaseShipmentRequest);
        }

        /// <summary>
        /// Returns true if PurchaseShipmentRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of PurchaseShipmentRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PurchaseShipmentRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.RequestToken == input.RequestToken ||
                    (this.RequestToken != null &&
                    this.RequestToken.Equals(input.RequestToken))
                ) && 
                (
                    this.RateId == input.RateId ||
                    (this.RateId != null &&
                    this.RateId.Equals(input.RateId))
                ) && 
                (
                    this.RequestedDocumentSpecification == input.RequestedDocumentSpecification ||
                    (this.RequestedDocumentSpecification != null &&
                    this.RequestedDocumentSpecification.Equals(input.RequestedDocumentSpecification))
                ) && 
                (
                    this.RequestedValueAddedServices == input.RequestedValueAddedServices ||
                    (this.RequestedValueAddedServices != null &&
                    this.RequestedValueAddedServices.Equals(input.RequestedValueAddedServices))
                ) && 
                (
                    this.AdditionalInputs == input.AdditionalInputs ||
                    this.AdditionalInputs != null &&
                    this.AdditionalInputs.SequenceEqual(input.AdditionalInputs)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RequestToken != null)
                    hashCode = hashCode * 59 + this.RequestToken.GetHashCode();
                if (this.RateId != null)
                    hashCode = hashCode * 59 + this.RateId.GetHashCode();
                if (this.RequestedDocumentSpecification != null)
                    hashCode = hashCode * 59 + this.RequestedDocumentSpecification.GetHashCode();
                if (this.RequestedValueAddedServices != null)
                    hashCode = hashCode * 59 + this.RequestedValueAddedServices.GetHashCode();
                if (this.AdditionalInputs != null)
                    hashCode = hashCode * 59 + this.AdditionalInputs.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
