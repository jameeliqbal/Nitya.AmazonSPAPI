/* 
 * Amazon Shipping API
 *
 * The Amazon Shipping API is designed to support outbound shipping use cases both for orders originating on Amazon-owned marketplaces as well as external channels/marketplaces. With these APIs, you can request shipping rates, create shipments, cancel shipments, and track shipments.
 *
 * OpenAPI spec version: v2
 * Contact: swa-api-core@amazon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPI.Orders.Client.SwaggerDateConverter;

namespace Common.Models.Amzn.Shipping
{
    /// <summary>
    /// The time windows promised for pickup and delivery events.
    /// </summary>
    [DataContract]
    public partial class Promise :  IEquatable<Promise>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Promise" /> class.
        /// </summary>
        /// <param name="deliveryWindow">deliveryWindow.</param>
        /// <param name="pickupWindow">pickupWindow.</param>
        public Promise(TimeWindow deliveryWindow = default(TimeWindow), TimeWindow pickupWindow = default(TimeWindow))
        {
            this.DeliveryWindow = deliveryWindow;
            this.PickupWindow = pickupWindow;
        }
        
        /// <summary>
        /// Gets or Sets DeliveryWindow
        /// </summary>
        [DataMember(Name="deliveryWindow", EmitDefaultValue=false)]
        public TimeWindow DeliveryWindow { get; set; }

        /// <summary>
        /// Gets or Sets PickupWindow
        /// </summary>
        [DataMember(Name="pickupWindow", EmitDefaultValue=false)]
        public TimeWindow PickupWindow { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Promise {\n");
            sb.Append("  DeliveryWindow: ").Append(DeliveryWindow).Append("\n");
            sb.Append("  PickupWindow: ").Append(PickupWindow).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Promise);
        }

        /// <summary>
        /// Returns true if Promise instances are equal
        /// </summary>
        /// <param name="input">Instance of Promise to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Promise input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DeliveryWindow == input.DeliveryWindow ||
                    (this.DeliveryWindow != null &&
                    this.DeliveryWindow.Equals(input.DeliveryWindow))
                ) && 
                (
                    this.PickupWindow == input.PickupWindow ||
                    (this.PickupWindow != null &&
                    this.PickupWindow.Equals(input.PickupWindow))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DeliveryWindow != null)
                    hashCode = hashCode * 59 + this.DeliveryWindow.GetHashCode();
                if (this.PickupWindow != null)
                    hashCode = hashCode * 59 + this.PickupWindow.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
