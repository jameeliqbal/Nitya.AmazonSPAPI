/* 
 * Amazon Shipping API
 *
 * The Amazon Shipping API is designed to support outbound shipping use cases both for orders originating on Amazon-owned marketplaces as well as external channels/marketplaces. With these APIs, you can request shipping rates, create shipments, cancel shipments, and track shipments.
 *
 * OpenAPI spec version: v2
 * Contact: swa-api-core@amazon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPI.Orders.Client.SwaggerDateConverter;

namespace Common.Models.Amzn.Shipping
{
    /// <summary>
    /// The payload for the getRates operation.
    /// </summary>
    [DataContract]
    public partial class GetRatesResult :  IEquatable<GetRatesResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetRatesResult" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetRatesResult() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetRatesResult" /> class.
        /// </summary>
        /// <param name="requestToken">requestToken (required).</param>
        /// <param name="rates">rates (required).</param>
        /// <param name="ineligibleRates">ineligibleRates.</param>
        public GetRatesResult(RequestToken requestToken = default(RequestToken), RateList rates = default(RateList), IneligibleRateList ineligibleRates = default(IneligibleRateList))
        {
            // to ensure "requestToken" is required (not null)
            if (requestToken == null)
            {
                throw new InvalidDataException("requestToken is a required property for GetRatesResult and cannot be null");
            }
            else
            {
                this.RequestToken = requestToken;
            }
            // to ensure "rates" is required (not null)
            if (rates == null)
            {
                throw new InvalidDataException("rates is a required property for GetRatesResult and cannot be null");
            }
            else
            {
                this.Rates = rates;
            }
            this.IneligibleRates = ineligibleRates;
        }
        
        /// <summary>
        /// Gets or Sets RequestToken
        /// </summary>
        [DataMember(Name="requestToken", EmitDefaultValue=false)]
        public RequestToken RequestToken { get; set; }

        /// <summary>
        /// Gets or Sets Rates
        /// </summary>
        [DataMember(Name="rates", EmitDefaultValue=false)]
        public RateList Rates { get; set; }

        /// <summary>
        /// Gets or Sets IneligibleRates
        /// </summary>
        [DataMember(Name="ineligibleRates", EmitDefaultValue=false)]
        public IneligibleRateList IneligibleRates { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetRatesResult {\n");
            sb.Append("  RequestToken: ").Append(RequestToken).Append("\n");
            sb.Append("  Rates: ").Append(Rates).Append("\n");
            sb.Append("  IneligibleRates: ").Append(IneligibleRates).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetRatesResult);
        }

        /// <summary>
        /// Returns true if GetRatesResult instances are equal
        /// </summary>
        /// <param name="input">Instance of GetRatesResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetRatesResult input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.RequestToken == input.RequestToken ||
                    (this.RequestToken != null &&
                    this.RequestToken.Equals(input.RequestToken))
                ) && 
                (
                    this.Rates == input.Rates ||
                    (this.Rates != null &&
                    this.Rates.Equals(input.Rates))
                ) && 
                (
                    this.IneligibleRates == input.IneligibleRates ||
                    (this.IneligibleRates != null &&
                    this.IneligibleRates.Equals(input.IneligibleRates))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RequestToken != null)
                    hashCode = hashCode * 59 + this.RequestToken.GetHashCode();
                if (this.Rates != null)
                    hashCode = hashCode * 59 + this.Rates.GetHashCode();
                if (this.IneligibleRates != null)
                    hashCode = hashCode * 59 + this.IneligibleRates.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
