/* 
 * Amazon Shipping API
 *
 * The Amazon Shipping API is designed to support outbound shipping use cases both for orders originating on Amazon-owned marketplaces as well as external channels/marketplaces. With these APIs, you can request shipping rates, create shipments, cancel shipments, and track shipments.
 *
 * OpenAPI spec version: v2
 * Contact: swa-api-core@amazon.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Amazon.SellingPartnerAPI.Orders.Client.SwaggerDateConverter;

namespace Common.Models.Amzn.Shipping
{
    /// <summary>
    /// The request schema for the getRates operation. When the channelType is Amazon, the shipTo address is not required and will be ignored.
    /// </summary>
    [DataContract]
    public partial class GetRatesRequest :  IEquatable<GetRatesRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetRatesRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetRatesRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetRatesRequest" /> class.
        /// </summary>
        /// <param name="shipTo">The ship to address..</param>
        /// <param name="shipFrom">The ship from address. (required).</param>
        /// <param name="returnTo">The return to address..</param>
        /// <param name="shipDate">The ship date and time (the requested pickup). This defaults to the current date and time..</param>
        /// <param name="packages">packages (required).</param>
        /// <param name="valueAddedServices">valueAddedServices.</param>
        /// <param name="taxDetails">taxDetails.</param>
        /// <param name="channelDetails">channelDetails (required).</param>
        public GetRatesRequest(Address shipTo = default(Address), Address shipFrom = default(Address), Address returnTo = default(Address), DateTime? shipDate = default(DateTime?), PackageList packages = default(PackageList), ValueAddedServiceDetails valueAddedServices = default(ValueAddedServiceDetails), TaxDetailList taxDetails = default(TaxDetailList), ChannelDetails channelDetails = default(ChannelDetails))
        {
            // to ensure "shipFrom" is required (not null)
            if (shipFrom == null)
            {
                throw new InvalidDataException("shipFrom is a required property for GetRatesRequest and cannot be null");
            }
            else
            {
                this.ShipFrom = shipFrom;
            }
            // to ensure "packages" is required (not null)
            if (packages == null)
            {
                throw new InvalidDataException("packages is a required property for GetRatesRequest and cannot be null");
            }
            else
            {
                this.Packages = packages;
            }
            // to ensure "channelDetails" is required (not null)
            if (channelDetails == null)
            {
                throw new InvalidDataException("channelDetails is a required property for GetRatesRequest and cannot be null");
            }
            else
            {
                this.ChannelDetails = channelDetails;
            }
            this.ShipTo = shipTo;
            this.ReturnTo = returnTo;
            this.ShipDate = shipDate;
            this.ValueAddedServices = valueAddedServices;
            this.TaxDetails = taxDetails;
        }
        
        /// <summary>
        /// The ship to address.
        /// </summary>
        /// <value>The ship to address.</value>
        [DataMember(Name="shipTo", EmitDefaultValue=false)]
        public Address ShipTo { get; set; }

        /// <summary>
        /// The ship from address.
        /// </summary>
        /// <value>The ship from address.</value>
        [DataMember(Name="shipFrom", EmitDefaultValue=false)]
        public Address ShipFrom { get; set; }

        /// <summary>
        /// The return to address.
        /// </summary>
        /// <value>The return to address.</value>
        [DataMember(Name="returnTo", EmitDefaultValue=false)]
        public Address ReturnTo { get; set; }

        /// <summary>
        /// The ship date and time (the requested pickup). This defaults to the current date and time.
        /// </summary>
        /// <value>The ship date and time (the requested pickup). This defaults to the current date and time.</value>
        [DataMember(Name="shipDate", EmitDefaultValue=false)]
        public DateTime? ShipDate { get; set; }

        /// <summary>
        /// Gets or Sets Packages
        /// </summary>
        [DataMember(Name="packages", EmitDefaultValue=false)]
        public PackageList Packages { get; set; }

        /// <summary>
        /// Gets or Sets ValueAddedServices
        /// </summary>
        [DataMember(Name="valueAddedServices", EmitDefaultValue=false)]
        public ValueAddedServiceDetails ValueAddedServices { get; set; }

        /// <summary>
        /// Gets or Sets TaxDetails
        /// </summary>
        [DataMember(Name="taxDetails", EmitDefaultValue=false)]
        public TaxDetailList TaxDetails { get; set; }

        /// <summary>
        /// Gets or Sets ChannelDetails
        /// </summary>
        [DataMember(Name="channelDetails", EmitDefaultValue=false)]
        public ChannelDetails ChannelDetails { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetRatesRequest {\n");
            sb.Append("  ShipTo: ").Append(ShipTo).Append("\n");
            sb.Append("  ShipFrom: ").Append(ShipFrom).Append("\n");
            sb.Append("  ReturnTo: ").Append(ReturnTo).Append("\n");
            sb.Append("  ShipDate: ").Append(ShipDate).Append("\n");
            sb.Append("  Packages: ").Append(Packages).Append("\n");
            sb.Append("  ValueAddedServices: ").Append(ValueAddedServices).Append("\n");
            sb.Append("  TaxDetails: ").Append(TaxDetails).Append("\n");
            sb.Append("  ChannelDetails: ").Append(ChannelDetails).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetRatesRequest);
        }

        /// <summary>
        /// Returns true if GetRatesRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of GetRatesRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetRatesRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ShipTo == input.ShipTo ||
                    (this.ShipTo != null &&
                    this.ShipTo.Equals(input.ShipTo))
                ) && 
                (
                    this.ShipFrom == input.ShipFrom ||
                    (this.ShipFrom != null &&
                    this.ShipFrom.Equals(input.ShipFrom))
                ) && 
                (
                    this.ReturnTo == input.ReturnTo ||
                    (this.ReturnTo != null &&
                    this.ReturnTo.Equals(input.ReturnTo))
                ) && 
                (
                    this.ShipDate == input.ShipDate ||
                    (this.ShipDate != null &&
                    this.ShipDate.Equals(input.ShipDate))
                ) && 
                (
                    this.Packages == input.Packages ||
                    (this.Packages != null &&
                    this.Packages.Equals(input.Packages))
                ) && 
                (
                    this.ValueAddedServices == input.ValueAddedServices ||
                    (this.ValueAddedServices != null &&
                    this.ValueAddedServices.Equals(input.ValueAddedServices))
                ) && 
                (
                    this.TaxDetails == input.TaxDetails ||
                    (this.TaxDetails != null &&
                    this.TaxDetails.Equals(input.TaxDetails))
                ) && 
                (
                    this.ChannelDetails == input.ChannelDetails ||
                    (this.ChannelDetails != null &&
                    this.ChannelDetails.Equals(input.ChannelDetails))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ShipTo != null)
                    hashCode = hashCode * 59 + this.ShipTo.GetHashCode();
                if (this.ShipFrom != null)
                    hashCode = hashCode * 59 + this.ShipFrom.GetHashCode();
                if (this.ReturnTo != null)
                    hashCode = hashCode * 59 + this.ReturnTo.GetHashCode();
                if (this.ShipDate != null)
                    hashCode = hashCode * 59 + this.ShipDate.GetHashCode();
                if (this.Packages != null)
                    hashCode = hashCode * 59 + this.Packages.GetHashCode();
                if (this.ValueAddedServices != null)
                    hashCode = hashCode * 59 + this.ValueAddedServices.GetHashCode();
                if (this.TaxDetails != null)
                    hashCode = hashCode * 59 + this.TaxDetails.GetHashCode();
                if (this.ChannelDetails != null)
                    hashCode = hashCode * 59 + this.ChannelDetails.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
